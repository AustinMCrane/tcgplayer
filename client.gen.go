// Package tcgplayer provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package tcgplayer

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// AuthTokenResponse defines model for AuthTokenResponse.
type AuthTokenResponse struct {
	AccessToken string `json:"access_token"`
	TokenType   string `json:"token_type"`
}

// Category defines model for Category.
type Category struct {
	// CategoryId Unique identifier for the category
	CategoryId int `json:"categoryId"`

	// ConditionGuideUrl URL for the condition guide
	ConditionGuideUrl string `json:"conditionGuideUrl"`

	// DisplayName Display name of the category
	DisplayName string `json:"displayName"`

	// IsScannable Indicates if the category is scannable
	IsScannable bool `json:"isScannable"`

	// ModifiedOn Last modified date and time
	ModifiedOn string `json:"modifiedOn"`

	// Name Name of the category
	Name string `json:"name"`

	// NonSealedLabel Non-sealed label
	NonSealedLabel string `json:"nonSealedLabel"`

	// Popularity Popularity of the category
	Popularity int `json:"popularity"`

	// SealedLabel Sealed label
	SealedLabel string `json:"sealedLabel"`

	// SeoCategoryName SEO-friendly name of the category
	SeoCategoryName string `json:"seoCategoryName"`
}

// CategoryResponse defines model for CategoryResponse.
type CategoryResponse struct {
	// Errors Array of error messages
	Errors []string `json:"errors"`

	// Results Array of category objects
	Results []Category `json:"results"`

	// Success Indicates if the request was successful
	Success bool `json:"success"`

	// TotalItems Total number of items
	TotalItems *int `json:"totalItems,omitempty"`
}

// Condition defines model for Condition.
type Condition struct {
	// Abbreviation Abbreviation like Rare = R
	Abbreviation string `json:"abbreviation"`

	// ConditionId Unique identifier for the condition
	ConditionId int `json:"conditionId"`

	// DisplayOrder Display order
	DisplayOrder int `json:"displayOrder"`

	// Name Display name/text for the rarity
	Name string `json:"name"`
}

// ConditionResponse defines model for ConditionResponse.
type ConditionResponse struct {
	// Errors Array of error messages
	Errors []string `json:"errors"`

	// Results Array of condition objects
	Results []Condition `json:"results"`

	// Success Indicates if the request was successful
	Success bool `json:"success"`

	// TotalItems Total number of items
	TotalItems *int `json:"totalItems,omitempty"`
}

// ExtendedData defines model for ExtendedData.
type ExtendedData struct {
	DisplayName string `json:"displayName"`
	Name        string `json:"name"`
	Value       string `json:"value"`
}

// Group defines model for Group.
type Group struct {
	// Abbreviation Abbreviation like set code
	Abbreviation string `json:"abbreviation"`

	// CategoryId Unique identifier for the category it belongs to
	CategoryId int `json:"categoryId"`

	// GroupId Unique identifier for the group
	GroupId int `json:"groupId"`

	// IsSupplemental Honestly no idea...
	IsSupplemental bool `json:"isSupplemental"`

	// ModifiedOn Modified on date
	ModifiedOn string `json:"modifiedOn"`

	// Name Display name/text for the group
	Name string `json:"name"`

	// PublishedOn Published on date
	PublishedOn string `json:"publishedOn"`
}

// GroupResponse defines model for GroupResponse.
type GroupResponse struct {
	// Errors Array of error messages
	Errors []string `json:"errors"`

	// Results Array of group objects
	Results []Group `json:"results"`

	// Success Indicates if the request was successful
	Success bool `json:"success"`

	// TotalItems Total number of items
	TotalItems *int `json:"totalItems,omitempty"`
}

// Language defines model for Language.
type Language struct {
	// Abbr Abbreviation like EN
	Abbr string `json:"abbr"`

	// LanguageId Unique identifier for the language
	LanguageId int `json:"languageId"`

	// Name Display name/text for the languge
	Name string `json:"name"`
}

// LanguageResponse defines model for LanguageResponse.
type LanguageResponse struct {
	// Errors Array of error messages
	Errors []string `json:"errors"`

	// Results Array of language objects
	Results []Language `json:"results"`

	// Success Indicates if the request was successful
	Success bool `json:"success"`

	// TotalItems Total number of items
	TotalItems *int `json:"totalItems,omitempty"`
}

// Price defines model for Price.
type Price struct {
	DirectLowPrice     float32  `json:"directLowPrice"`
	LowPrice           float32  `json:"lowPrice"`
	LowestListingPrice *float32 `json:"lowestListingPrice,omitempty"`
	LowestShipping     float32  `json:"lowestShipping"`
	MarketPrice        float32  `json:"marketPrice"`

	// SkuId sku id
	SkuId int `json:"skuId"`
}

// PriceResponse defines model for PriceResponse.
type PriceResponse struct {
	// Errors Array of error messages
	Errors *[]string `json:"errors,omitempty"`

	// Results Array of sku prices
	Results *[]Price `json:"results,omitempty"`

	// Success Indicates if the request was successful
	Success *bool `json:"success,omitempty"`

	// TotalItems Total number of items
	TotalItems *int `json:"totalItems,omitempty"`
}

// Printing defines model for Printing.
type Printing struct {
	// DisplayOrder Display order
	DisplayOrder int `json:"displayOrder"`

	// ModifiedOn Modified on date
	ModifiedOn string `json:"modifiedOn"`

	// Name Display name/text for the rarity
	Name string `json:"name"`

	// PrintingId Unique identifier for the printing
	PrintingId int `json:"printingId"`
}

// PrintingResponse defines model for PrintingResponse.
type PrintingResponse struct {
	// Errors Array of error messages
	Errors []string `json:"errors"`

	// Results Array of printing objects
	Results []Printing `json:"results"`

	// Success Indicates if the request was successful
	Success bool `json:"success"`

	// TotalItems Total number of items
	TotalItems *int `json:"totalItems,omitempty"`
}

// Product defines model for Product.
type Product struct {
	CategoryId   int             `json:"categoryId"`
	CleanName    string          `json:"cleanName"`
	ExtendedData *[]ExtendedData `json:"extendedData,omitempty"`
	GroupId      int             `json:"groupId"`
	ImageUrl     string          `json:"imageUrl"`
	ModifiedOn   string          `json:"modifiedOn"`
	Name         string          `json:"name"`
	ProductId    int             `json:"productId"`
	Url          string          `json:"url"`
}

// ProductResponse defines model for ProductResponse.
type ProductResponse struct {
	// Errors Array of error messages
	Errors *[]string `json:"errors,omitempty"`

	// Results Array of product objects
	Results *[]Product `json:"results,omitempty"`

	// Success Indicates if the request was successful
	Success *bool `json:"success,omitempty"`

	// TotalItems Total number of items
	TotalItems *int `json:"totalItems,omitempty"`
}

// Rarity defines model for Rarity.
type Rarity struct {
	// DbValue A single char db value like "T"
	DbValue string `json:"dbValue"`

	// DisplayText Display name/text for the rarity
	DisplayText string `json:"displayText"`

	// RarityId Unique identifier for the rarity
	RarityId int `json:"rarityId"`
}

// RarityResponse defines model for RarityResponse.
type RarityResponse struct {
	// Errors Array of error messages
	Errors []string `json:"errors"`

	// Results Array of rarity objects
	Results []Rarity `json:"results"`

	// Success Indicates if the request was successful
	Success bool `json:"success"`

	// TotalItems Total number of items
	TotalItems *int `json:"totalItems,omitempty"`
}

// SKU defines model for SKU.
type SKU struct {
	// ConditionId condition id
	ConditionId int `json:"conditionId"`

	// LanguageId lanugage id
	LanguageId int `json:"languageId"`

	// PrintingId printing id
	PrintingId int `json:"printingId"`

	// ProductId product id
	ProductId int `json:"productId"`

	// SkuId sku id
	SkuId int `json:"skuId"`
}

// SKUResponse defines model for SKUResponse.
type SKUResponse struct {
	// Errors Array of error messages
	Errors *[]string `json:"errors,omitempty"`

	// Results Array of product objects
	Results *[]SKU `json:"results,omitempty"`

	// Success Indicates if the request was successful
	Success *bool `json:"success,omitempty"`

	// TotalItems Total number of items
	TotalItems *int `json:"totalItems,omitempty"`
}

// GetCategoriesParams defines parameters for GetCategories.
type GetCategoriesParams struct {
	Offset    int     `form:"offset" json:"offset"`
	Limit     int     `form:"limit" json:"limit"`
	SortOrder *string `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
	SortDesc  *bool   `form:"sortDesc,omitempty" json:"sortDesc,omitempty"`
}

// GetGroupsParams defines parameters for GetGroups.
type GetGroupsParams struct {
	Offset int `form:"offset" json:"offset"`
	Limit  int `form:"limit" json:"limit"`
}

// GetProductsParams defines parameters for GetProducts.
type GetProductsParams struct {
	// CategoryId Unique identifier for the category
	CategoryId int `form:"categoryId" json:"categoryId"`

	// CategoryName Name for the category
	CategoryName *int `form:"categoryName,omitempty" json:"categoryName,omitempty"`

	// GroupId Unique identifier for the group
	GroupId *int `form:"groupId,omitempty" json:"groupId,omitempty"`

	// GroupName Name of the group
	GroupName *string `form:"groupName,omitempty" json:"groupName,omitempty"`

	// ProductName Name of the product
	ProductName *string `form:"productName,omitempty" json:"productName,omitempty"`

	// GetExtendedFields Get extra info
	GetExtendedFields *bool `form:"getExtendedFields,omitempty" json:"getExtendedFields,omitempty"`

	// ProductTypes Types of products like cards comma seperated list of types
	ProductTypes *string `form:"productTypes,omitempty" json:"productTypes,omitempty"`
	Offset       *int    `form:"offset,omitempty" json:"offset,omitempty"`
	Limit        *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostTokenFormdataBody defines parameters for PostToken.
type PostTokenFormdataBody struct {
	ClientId     string `form:"client_id" json:"client_id"`
	ClientSecret string `form:"client_secret" json:"client_secret"`
	GrantType    string `form:"grant_type" json:"grant_type"`
}

// PostTokenFormdataRequestBody defines body for PostToken for application/x-www-form-urlencoded ContentType.
type PostTokenFormdataRequestBody PostTokenFormdataBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCategories request
	GetCategories(ctx context.Context, params *GetCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCategory request
	GetCategory(ctx context.Context, categoryId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConditions request
	GetConditions(ctx context.Context, categoryId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroups request
	GetGroups(ctx context.Context, categoryId int, params *GetGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLanguages request
	GetLanguages(ctx context.Context, categoryId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPrintings request
	GetPrintings(ctx context.Context, categoryId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRarities request
	GetRarities(ctx context.Context, categoryId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProducts request
	GetProducts(ctx context.Context, params *GetProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductSkus request
	GetProductSkus(ctx context.Context, productId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSKUPricing request
	GetSKUPricing(ctx context.Context, skuIds string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTokenWithBody request with any body
	PostTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTokenWithFormdataBody(ctx context.Context, body PostTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCategories(ctx context.Context, params *GetCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCategoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCategory(ctx context.Context, categoryId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCategoryRequest(c.Server, categoryId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConditions(ctx context.Context, categoryId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConditionsRequest(c.Server, categoryId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroups(ctx context.Context, categoryId int, params *GetGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupsRequest(c.Server, categoryId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLanguages(ctx context.Context, categoryId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLanguagesRequest(c.Server, categoryId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPrintings(ctx context.Context, categoryId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPrintingsRequest(c.Server, categoryId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRarities(ctx context.Context, categoryId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRaritiesRequest(c.Server, categoryId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProducts(ctx context.Context, params *GetProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductSkus(ctx context.Context, productId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductSkusRequest(c.Server, productId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSKUPricing(ctx context.Context, skuIds string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSKUPricingRequest(c.Server, skuIds)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTokenWithFormdataBody(ctx context.Context, body PostTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTokenRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCategoriesRequest generates requests for GetCategories
func NewGetCategoriesRequest(server string, params *GetCategoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalog/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortDesc", runtime.ParamLocationQuery, *params.SortDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCategoryRequest generates requests for GetCategory
func NewGetCategoryRequest(server string, categoryId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, categoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalog/categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConditionsRequest generates requests for GetConditions
func NewGetConditionsRequest(server string, categoryId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, categoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalog/categories/%s/conditions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGroupsRequest generates requests for GetGroups
func NewGetGroupsRequest(server string, categoryId int, params *GetGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, categoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalog/categories/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLanguagesRequest generates requests for GetLanguages
func NewGetLanguagesRequest(server string, categoryId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, categoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalog/categories/%s/languages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPrintingsRequest generates requests for GetPrintings
func NewGetPrintingsRequest(server string, categoryId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, categoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalog/categories/%s/printings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRaritiesRequest generates requests for GetRarities
func NewGetRaritiesRequest(server string, categoryId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "categoryId", runtime.ParamLocationPath, categoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalog/categories/%s/rarities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductsRequest generates requests for GetProducts
func NewGetProductsRequest(server string, params *GetProductsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalog/products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "categoryId", runtime.ParamLocationQuery, params.CategoryId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.CategoryName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "categoryName", runtime.ParamLocationQuery, *params.CategoryName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GroupId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "groupId", runtime.ParamLocationQuery, *params.GroupId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GroupName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "groupName", runtime.ParamLocationQuery, *params.GroupName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "productName", runtime.ParamLocationQuery, *params.ProductName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GetExtendedFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "getExtendedFields", runtime.ParamLocationQuery, *params.GetExtendedFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "productTypes", runtime.ParamLocationQuery, *params.ProductTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductSkusRequest generates requests for GetProductSkus
func NewGetProductSkusRequest(server string, productId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/catalog/products/%s/skus", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSKUPricingRequest generates requests for GetSKUPricing
func NewGetSKUPricingRequest(server string, skuIds string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "skuIds", runtime.ParamLocationPath, skuIds)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pricing/sku/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTokenRequestWithFormdataBody calls the generic PostToken builder with application/x-www-form-urlencoded body
func NewPostTokenRequestWithFormdataBody(server string, body PostTokenFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostTokenRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostTokenRequestWithBody generates requests for PostToken with any type of body
func NewPostTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCategoriesWithResponse request
	GetCategoriesWithResponse(ctx context.Context, params *GetCategoriesParams, reqEditors ...RequestEditorFn) (*GetCategoriesResponse, error)

	// GetCategoryWithResponse request
	GetCategoryWithResponse(ctx context.Context, categoryId int, reqEditors ...RequestEditorFn) (*GetCategoryResponse, error)

	// GetConditionsWithResponse request
	GetConditionsWithResponse(ctx context.Context, categoryId int, reqEditors ...RequestEditorFn) (*GetConditionsResponse, error)

	// GetGroupsWithResponse request
	GetGroupsWithResponse(ctx context.Context, categoryId int, params *GetGroupsParams, reqEditors ...RequestEditorFn) (*GetGroupsResponse, error)

	// GetLanguagesWithResponse request
	GetLanguagesWithResponse(ctx context.Context, categoryId int, reqEditors ...RequestEditorFn) (*GetLanguagesResponse, error)

	// GetPrintingsWithResponse request
	GetPrintingsWithResponse(ctx context.Context, categoryId int, reqEditors ...RequestEditorFn) (*GetPrintingsResponse, error)

	// GetRaritiesWithResponse request
	GetRaritiesWithResponse(ctx context.Context, categoryId int, reqEditors ...RequestEditorFn) (*GetRaritiesResponse, error)

	// GetProductsWithResponse request
	GetProductsWithResponse(ctx context.Context, params *GetProductsParams, reqEditors ...RequestEditorFn) (*GetProductsResponse, error)

	// GetProductSkusWithResponse request
	GetProductSkusWithResponse(ctx context.Context, productId int, reqEditors ...RequestEditorFn) (*GetProductSkusResponse, error)

	// GetSKUPricingWithResponse request
	GetSKUPricingWithResponse(ctx context.Context, skuIds string, reqEditors ...RequestEditorFn) (*GetSKUPricingResponse, error)

	// PostTokenWithBodyWithResponse request with any body
	PostTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTokenResponse, error)

	PostTokenWithFormdataBodyWithResponse(ctx context.Context, body PostTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostTokenResponse, error)
}

type GetCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryResponse
}

// Status returns HTTPResponse.Status
func (r GetCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryResponse
}

// Status returns HTTPResponse.Status
func (r GetCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConditionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConditionResponse
}

// Status returns HTTPResponse.Status
func (r GetConditionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConditionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupResponse
}

// Status returns HTTPResponse.Status
func (r GetGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLanguagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LanguageResponse
}

// Status returns HTTPResponse.Status
func (r GetLanguagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLanguagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPrintingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrintingResponse
}

// Status returns HTTPResponse.Status
func (r GetPrintingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPrintingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRaritiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RarityResponse
}

// Status returns HTTPResponse.Status
func (r GetRaritiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRaritiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductResponse
}

// Status returns HTTPResponse.Status
func (r GetProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductSkusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SKUResponse
}

// Status returns HTTPResponse.Status
func (r GetProductSkusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductSkusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSKUPricingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PriceResponse
}

// Status returns HTTPResponse.Status
func (r GetSKUPricingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSKUPricingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthTokenResponse
}

// Status returns HTTPResponse.Status
func (r PostTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCategoriesWithResponse request returning *GetCategoriesResponse
func (c *ClientWithResponses) GetCategoriesWithResponse(ctx context.Context, params *GetCategoriesParams, reqEditors ...RequestEditorFn) (*GetCategoriesResponse, error) {
	rsp, err := c.GetCategories(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCategoriesResponse(rsp)
}

// GetCategoryWithResponse request returning *GetCategoryResponse
func (c *ClientWithResponses) GetCategoryWithResponse(ctx context.Context, categoryId int, reqEditors ...RequestEditorFn) (*GetCategoryResponse, error) {
	rsp, err := c.GetCategory(ctx, categoryId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCategoryResponse(rsp)
}

// GetConditionsWithResponse request returning *GetConditionsResponse
func (c *ClientWithResponses) GetConditionsWithResponse(ctx context.Context, categoryId int, reqEditors ...RequestEditorFn) (*GetConditionsResponse, error) {
	rsp, err := c.GetConditions(ctx, categoryId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConditionsResponse(rsp)
}

// GetGroupsWithResponse request returning *GetGroupsResponse
func (c *ClientWithResponses) GetGroupsWithResponse(ctx context.Context, categoryId int, params *GetGroupsParams, reqEditors ...RequestEditorFn) (*GetGroupsResponse, error) {
	rsp, err := c.GetGroups(ctx, categoryId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupsResponse(rsp)
}

// GetLanguagesWithResponse request returning *GetLanguagesResponse
func (c *ClientWithResponses) GetLanguagesWithResponse(ctx context.Context, categoryId int, reqEditors ...RequestEditorFn) (*GetLanguagesResponse, error) {
	rsp, err := c.GetLanguages(ctx, categoryId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLanguagesResponse(rsp)
}

// GetPrintingsWithResponse request returning *GetPrintingsResponse
func (c *ClientWithResponses) GetPrintingsWithResponse(ctx context.Context, categoryId int, reqEditors ...RequestEditorFn) (*GetPrintingsResponse, error) {
	rsp, err := c.GetPrintings(ctx, categoryId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPrintingsResponse(rsp)
}

// GetRaritiesWithResponse request returning *GetRaritiesResponse
func (c *ClientWithResponses) GetRaritiesWithResponse(ctx context.Context, categoryId int, reqEditors ...RequestEditorFn) (*GetRaritiesResponse, error) {
	rsp, err := c.GetRarities(ctx, categoryId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRaritiesResponse(rsp)
}

// GetProductsWithResponse request returning *GetProductsResponse
func (c *ClientWithResponses) GetProductsWithResponse(ctx context.Context, params *GetProductsParams, reqEditors ...RequestEditorFn) (*GetProductsResponse, error) {
	rsp, err := c.GetProducts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsResponse(rsp)
}

// GetProductSkusWithResponse request returning *GetProductSkusResponse
func (c *ClientWithResponses) GetProductSkusWithResponse(ctx context.Context, productId int, reqEditors ...RequestEditorFn) (*GetProductSkusResponse, error) {
	rsp, err := c.GetProductSkus(ctx, productId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductSkusResponse(rsp)
}

// GetSKUPricingWithResponse request returning *GetSKUPricingResponse
func (c *ClientWithResponses) GetSKUPricingWithResponse(ctx context.Context, skuIds string, reqEditors ...RequestEditorFn) (*GetSKUPricingResponse, error) {
	rsp, err := c.GetSKUPricing(ctx, skuIds, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSKUPricingResponse(rsp)
}

// PostTokenWithBodyWithResponse request with arbitrary body returning *PostTokenResponse
func (c *ClientWithResponses) PostTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTokenResponse, error) {
	rsp, err := c.PostTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTokenResponse(rsp)
}

func (c *ClientWithResponses) PostTokenWithFormdataBodyWithResponse(ctx context.Context, body PostTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostTokenResponse, error) {
	rsp, err := c.PostTokenWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTokenResponse(rsp)
}

// ParseGetCategoriesResponse parses an HTTP response from a GetCategoriesWithResponse call
func ParseGetCategoriesResponse(rsp *http.Response) (*GetCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCategoryResponse parses an HTTP response from a GetCategoryWithResponse call
func ParseGetCategoryResponse(rsp *http.Response) (*GetCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConditionsResponse parses an HTTP response from a GetConditionsWithResponse call
func ParseGetConditionsResponse(rsp *http.Response) (*GetConditionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConditionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConditionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGroupsResponse parses an HTTP response from a GetGroupsWithResponse call
func ParseGetGroupsResponse(rsp *http.Response) (*GetGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLanguagesResponse parses an HTTP response from a GetLanguagesWithResponse call
func ParseGetLanguagesResponse(rsp *http.Response) (*GetLanguagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLanguagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LanguageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPrintingsResponse parses an HTTP response from a GetPrintingsWithResponse call
func ParseGetPrintingsResponse(rsp *http.Response) (*GetPrintingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPrintingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrintingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRaritiesResponse parses an HTTP response from a GetRaritiesWithResponse call
func ParseGetRaritiesResponse(rsp *http.Response) (*GetRaritiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRaritiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RarityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProductsResponse parses an HTTP response from a GetProductsWithResponse call
func ParseGetProductsResponse(rsp *http.Response) (*GetProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProductSkusResponse parses an HTTP response from a GetProductSkusWithResponse call
func ParseGetProductSkusResponse(rsp *http.Response) (*GetProductSkusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductSkusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SKUResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSKUPricingResponse parses an HTTP response from a GetSKUPricingWithResponse call
func ParseGetSKUPricingResponse(rsp *http.Response) (*GetSKUPricingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSKUPricingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PriceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTokenResponse parses an HTTP response from a PostTokenWithResponse call
func ParsePostTokenResponse(rsp *http.Response) (*PostTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
